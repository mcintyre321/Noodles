@using System.Web.Mvc
@using System.Web.Mvc.Html
@using Noodles
@using Noodles.AspMvc.Helpers
@using Noodles.Models
@using FormFactory;
@using Noodles.AspMvc.UiAttributes
@model Noodles.Models.Resource
@using Noodles.AspMvc.Models.Layout
@{
    var layoutVm = this.Html.LayoutVm();
    layoutVm.RegisterScripts();
}

@{
    var ancestors = Model.AncestorsAndSelf().OfType<Resource>().ToArray();
}
@Breadcrumb(ancestors.Reverse().ToArray())

    @Html.BestPartial(Model, Model.ValueType, "Noodles/Node.")

@helper RenderMenu(HtmlHelper helper, Resource resource, IEnumerable<Resource> walked, Func<string> renderInner)
{
    var links = resource.NodeLinks.GroupBy(l => l.UiHint);

    if (resource.Parent == null)
    {
        foreach (var method in resource.NodeMethods.Hinted("TopBar.LeftItems"))
        {
            Html.LayoutVm().TopBar.LeftItems.Add(new NavItemVm() { Html = NoodlesHelper.NodeMethodLink(method).ToHtmlString() });
        }
        foreach (var method in resource.NodeMethods.Hinted("TopBar.RightItems"))
        {
            Html.LayoutVm().TopBar.RightItems.Add(new NavItemVm() {Html = NoodlesHelper.NodeMethodLink(method).ToHtmlString()});
        }
        foreach (var method in resource.NodeMethods.Hinted("TopBar.AccountMenu"))
        {
            Html.LayoutVm().TopBar.AccountMenuItems.Add(new NavItemVm() {Html = NoodlesHelper.NodeMethodLink(method).ToHtmlString()});
        }
    }
    var innerRendered = false;
    foreach (var linkGroup in links)
    {
        switch (linkGroup.Key)
        {
            case "SideNav":
            {
                ViewBag.Indent = (ViewBag.Indent ?? 0) + 3;
                <div class="row">
                    <div class="span3">
                        @Nav(helper, linkGroup, walked, "nav-pills nav-stacked")
                    </div>
                    <div class="span@(12 - (ViewBag.Indent ?? 0))">@Html.Raw(renderInner())</div>
                </div>
                innerRendered = true;
                break;
            }
            case "TopBar.RightItems":
            {
                Html.LayoutVm().TopBar.RightItems.AddRange(linkGroup.Select(l => new NavItemVm() {Html = "<a href='" + l.Url + "'>" + l.DisplayName + "</a>", Active = walked.Any(u => u.Url == l.Url)}));
                break;
            }
            case "TopBar.LeftItems":
            {
                Html.LayoutVm().TopBar.LeftItems.AddRange(linkGroup.Select(l => new NavItemVm() {Html = "<a href='" + l.Url + "'>" + l.DisplayName + "</a>", Active = walked.Any(u => u.Url == l.Url)}));
                break;
            }
                // NOTE: actually, this isn't used yet, so i haven't tested it. TI
//            case "TopBar.AccountMenu":
//                {
//                    Html.LayoutVm().TopBar.AccountMenuItems.AddRange(linkGroup.Select(l => new NavItemVm() { Html = "<a href='" + l.Url + "'>" + l.DisplayName + "</a>", Active = walked.Any(u => u.Url == l.Url) }));
//                    break;
//                }
            case "Inline":
            case "Hidden":
            case "Modal":
                break;
            case "NavBar":
            {
                <div class="navbar">
                    <div class="navbar-inner">
                        @if (resource.Parent == null)
                        {
                            <a class="brand" href="@resource.Url">@resource.DisplayName</a>
                        }
                        @Nav(helper, linkGroup, walked, "")
                    </div>
                </div>
                break;
            }
            default:
            {
                var type = linkGroup.First().TargetType;
                var prefix = "Noodles/Links." + linkGroup.Key + ".";
                var partialName = Html.BestViewName(type, prefix);
                if (partialName != null)
                {
                    @Html.Partial(partialName, linkGroup.Select(l => l.Target))
                }
                break;
            }
        }

    }
    if (!innerRendered)
    {
       
        @Html.Raw(renderInner())
    }
}

@helper Nav(HtmlHelper helper, IEnumerable<NodeLink> links, IEnumerable<Resource> walked, string navOptions)
{
    <ul class="nav @navOptions">
        @foreach (var node in links)
        {
            var active = walked.Any(w => w.Url == node.Url);
            <li @Html.Raw(active ? "class=\"active\"" : "")><a href="@node.Url">@node.DisplayName</a></li>
        }
    </ul>
}

@helper Breadcrumb(Resource[] walked)
{
    if(walked.Length > 1)
    {
        <ul class="walked-path breadcrumb">
            
            @for (var i = 0; i < walked.Length - 1; i++)
            {
                var crumb = walked[i];
                var parentResource = crumb.Parent as Resource;
                if (parentResource != null)
                {
                    if (parentResource.NodeLink(crumb.Name).UiHint == "Inline")
                    {
                        continue;
                    }
                }
                <li><a href="@crumb.Url">@crumb.DisplayName</a> <span class="divider">/</span></li>
            }
            <li class="active">@walked.Last().DisplayName</li>
        </ul>
    }
}