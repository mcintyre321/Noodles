@using System.Web.Mvc
@using System.Web.Mvc.Html
@using Noodles
@using Noodles.AspMvc.Helpers
@using Noodles.Models
@using FormFactory;
@model Noodles.Models.INode
@using Noodles.AspMvc.Models.Layout
@{
    var layoutVm = this.Html.LayoutVm();
    layoutVm.RegisterScripts();

    var viewName = Html.BestViewName(Model.ValueType, "Noodles/Node.") ?? "Noodles/Node.Object";
    var resources = Model.AncestorsAndSelf().ToArray().Reverse().ToArray();
}

@Breadcrumb(resources)

@Html.Partial(viewName, Model) 

@helper Nav(HtmlHelper helper, IEnumerable<NodeLink> links, IEnumerable<INode> walked, string navOptions)
{
    <ul class="nav @navOptions">
        @foreach (var node in links)
        {
            var active = walked.Any(w => w.Url == node.Url);
            <li @Html.Raw(active ? "class=\"active\"" : "")><a href="@node.Url">@node.DisplayName</a></li>
        }
    </ul>
}

@helper Breadcrumb(INode[] walked)
{
    if(walked.Length > 1)
    {
        <ul class="walked-path breadcrumb">
            
            @for (var i = 0; i < walked.Length - 1; i++)
            {
                var crumb = walked[i];
                var parentResource = crumb.Parent as Resource;
                if (parentResource != null)
                {
                    if (parentResource.NodeLink(crumb.Name).UiHint == "Inline")
                    {
                        continue;
                    }
                }
                <li><a href="@crumb.Url">@crumb.DisplayName</a> <span class="divider">/</span></li>
            }
            <li class="active">@walked.Last().DisplayName</li>
        </ul>
    }
}