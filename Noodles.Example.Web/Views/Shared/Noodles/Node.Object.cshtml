@using System.Web.Mvc
@using System.Web.Mvc.Html
@using FormFactory.Attributes
@using Noodles.AspMvc.Models.Layout
@using Noodles.AspMvc.UiAttributes
@using Noodles.AspMvc.Helpers
@using Noodles.Models
@using FormFactory;
@using FormFactory.AspMvc;

@model Noodles.Models.INode
 
@Body(Html, Model)
@helper Body(HtmlHelper html, INode resource)
{
    <div class="node-container" data-node-url="@resource.Url">
        <div class="nodebody">
            @{
                var bodyView = html.BestViewName(resource.ValueType, "Noodles/NodeBody.") ?? "Noodles/NodeBody.Object";
            }
            @html.Partial(bodyView, resource)
        </div>
        <div class="node-components">
            @{
                foreach (var property in resource.ChildNodes.OfType<NodeProperty>())
                {
                    var viewNameStart = ("Noodles/NodePropertyContainer" + (string.IsNullOrWhiteSpace(property.UiHint) ? "" : ("-" + property.UiHint)));
                    var viewPropertyType = property.Value == null ? property.ValueType : property.Value.GetType();
                    var viewName = Html.BestViewName(viewPropertyType, viewNameStart + ".") ?? (viewNameStart + ".Object");
                    var view = ViewEngines.Engines.FindPartialView(this.ViewContext.Controller.ControllerContext, viewName);
                    viewName = (view.View != null) ? viewName : Html.BestViewName(viewPropertyType, "Noodles/NodePropertyContainer.");
                <div class="node-component node-property" data-uihint="@property.UiHint" data-node-url="@property.Url">
                    @Html.Partial(viewName, property)
                </div>
                } 
             
                var nodeMethods = resource.ChildNodes.OfType<NodeMethod>().ToArray();
                if (nodeMethods.Any())
                {
                    foreach (var method in nodeMethods)
                    {
                <li class="node-component node-method" data-uihint="@method.UiHint" data-node-url="@method.Url">
                    <a  href="@method.Url">@method.DisplayName</a>
                </li>
                    }
                }
             
                var nodeLinks = resource.ChildNodes.OfType<NodeLink>().ToArray();
                if (nodeLinks.Any())
                {
                    foreach (var nodeLink in nodeLinks)
                    {
                <div class="node-component node-method" data-uihint="@nodeLink.UiHint" data-node-url="@nodeLink.Url">
                    <a  href="@nodeLink.Url">@nodeLink.DisplayName</a>
                </div>
                    }
                }
            }
        </div>
    </div>
}
