@* Generator: MvcHelper *@
@using System.ComponentModel
@using System.Web.Mvc
@using System.Web.Mvc.Html
@using Noodles
@using Noodles.AspMvc
@using Noodles.AspMvc.Helpers
@using Noodles.AspMvc.UiAttributes
@using Noodles.Models

@helper NodeLink(HtmlHelper html, INode node)
{ @NodeLink(html, node, null)}
@helper NodeLink(HtmlHelper html, INode node, string additionalClasses)
{
    @NodeLink(html, node, additionalClasses, @<text>@node.DisplayName</text>)
}
@helper NodeLink(HtmlHelper html, INode node, string additionalClasses, Func<dynamic, HelperResult> innerHtml)
{
    var viewAtt = node.Attributes.OfType<IRenderHtml>().SingleOrDefault();

    if (viewAtt != null)
    {
        @viewAtt.Render(html, node, @<a class="node-link @(additionalClasses ?? "") @(node.DisplayName)" href="@node.Url">@innerHtml(null)</a>)
    }
    else
    {
        <a class="node-link @(additionalClasses ?? "")" href="@node.Url">@innerHtml(null)</a>
    }
}

@helper NodeMethodLink(IInvokeable method)
{ @NodeMethodLink(method, null)}
@helper NodeMethodLink(IInvokeable method, string additionalClasses)
{
    @NodeMethodLink(method, additionalClasses, @<text>@method.InvokeDisplayName</text>)
}
@helper NodeMethodLink(IInvokeable method, string additionalClasses, Func<dynamic, HelperResult> innerHtml)
{
    if (method != null)
    {
    <a class="nodeMethodLink @(additionalClasses ?? "") @(method.Target.NodeType().Name.ToClassName())" href="@method.InvokeUrl">@innerHtml(null)</a>
    }
}

@helper Form(HtmlHelper html, INode node)
{
    var settableProperties = ((IInvokeable)node).Parameters.Where(p => p.Readonly == false);
    @Form(html, node, settableProperties)
}

@helper Form(HtmlHelper html, INode node, IEnumerable<IInvokeableParameter> fieldsToDisplay)
{

    var isNodeMethod = node is NodeMethod;
    var fields = fieldsToDisplay as IInvokeableParameter[] ?? fieldsToDisplay.ToArray();
    if (isNodeMethod || fields.Any())
    {
    <form class="node-form" action="@node.Url" method="POST">
        @{
        var descriptionAttribute = node.Attributes.OfType<DescriptionAttribute>().SingleOrDefault();
        if (descriptionAttribute != null)
        {
            <div class="noodles-callout noodles-callout-info">
                @html.Raw(descriptionAttribute.Description)
            </div>
        }
        }
        @if (html.ViewData.ModelState.SelectMany(ms => ms.Value.Errors).Any())
        {
            <div class="noodles-callout noodles-callout-danger">
                Please correct the issues below:
                                                                      @html.ValidationSummary(true)
            </div>
        }
        @foreach (var field in fields)
        {
            var parameter = field;
            var vm = parameter.ToPropertyVm();
            @html.Partial("FormFactory/Form.Property", vm)
        }
        <input type="submit" value="@(isNodeMethod ? node.DisplayName : "Update")" />
    </form>

    }
}

@helper DropdownNode(HtmlHelper Html, INode node, string additionalClasses)
{
    @BootstrapHelper.DropdownLinksButton(node.DisplayName, @<li style="margin: 20px; width: 400px;" class="keep-open">
                                                                @NoodlesHelper.Form(Html, node)
                                                            </li>, additionalClasses)
}

@helper Property(HtmlHelper html, NodeProperty property)
{
    var vm = property.ToPropertyVm();
    vm.Readonly = true;
    html.RenderPartial("FormFactory/Form.Property", vm);
}