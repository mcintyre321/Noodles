@* Generator: MvcHelper *@
@using System.Collections
@using System.Web.Mvc
@using System.Web.Mvc.Html
@using Noodles
@using Noodles.AspMvc
@using Noodles.AspMvc.Helpers
@using Noodles.Helpers
@using Noodles.AspMvc.Helpers
@using FormFactory
@using Noodles.Models
@using Noodles.RequestHandling
@helper NodeMethodsDropdown(Resource obj)
{ @NodeMethodsDropdown(obj, null) }
@helper NodeMethodsDropdown(Resource obj, string additionalClasses)
{ @NodeMethodsDropdown(obj, null, null) }
@helper NodeMethodsDropdown(Resource obj, string additionalClasses, string excludedMethodNamesCsv)
{ @*
    var excludedMethodNames = (excludedMethodNamesCsv ?? "").Split(',');
    var filteredNodeMethods = obj.NodeMethods.ExceptNamed(excludedMethodNames);
    if (filteredNodeMethods.Cast<object>().Any())
    {
    @BootstrapHelper.DropdownLinksButton("Actions", @<text>
    @foreach (var method in filteredNodeMethods)
    {
        <li>@NodeMethodLink(method)</li>
    }

    </text>, additionalClasses)
    }
*@
}
@helper NodeLink(INode node)
{ @NodeLink(node, null)}
@helper NodeLink(INode node, string additionalClasses)
{
    @NodeLink(node, additionalClasses, @<text>@node.DisplayName</text>)
}
@helper NodeLink(INode node, string additionalClasses, Func<dynamic, HelperResult> innerHtml)
{
    <a class="node-link @(additionalClasses ?? "") @(node.DisplayName)" href="@node.Url">@innerHtml(null)</a>
}

@helper NodeMethodLink(IInvokeable method)
{ @NodeMethodLink(method, null)}
@helper NodeMethodLink(IInvokeable method, string additionalClasses)
{
    @NodeMethodLink(method, additionalClasses, @<text>@method.InvokeDisplayName</text>)
}
@helper NodeMethodLink(IInvokeable method, string additionalClasses, Func<dynamic, HelperResult> innerHtml)
{
    if (method != null)
    {
    <a class="nodeMethodLink @(additionalClasses ?? "") @(method.Target.NodeType().Name.ToClassName())" href="@method.InvokeUrl">@innerHtml(null)</a>
    }
}
@helper NodeMethodForm(System.Web.Mvc.HtmlHelper html, IInvokeable method, string formClass)
{
    if (method != null)
    {
    @html.Partial("Noodles/NodeMethod", method, new ViewDataDictionary { { "FormClass", formClass ?? "" } })
    }
}
@helper NodeMethodForm(System.Web.Mvc.HtmlHelper html, IInvokeable method, string formClass, ViewDataDictionary dict)
{
    if (method != null)
    {
        dict = dict ?? new ViewDataDictionary();
        dict["FormClass"] = formClass;
    @NodeMethodForm(html, method, dict)
    }
}
@helper NodeMethodForm(System.Web.Mvc.HtmlHelper html, IInvokeable method, ViewDataDictionary dict)
{
    if (method != null)
    {
        dict = dict ?? new ViewDataDictionary();
    <div class="nodeMethod">
        @html.Partial("Noodles/NodeMethod", method, dict)
    </div>
    }
}
@helper NodeMethodFormInline(System.Web.Mvc.HtmlHelper html, NodeMethod method)
{
    if (method != null)
    {
    @NodeMethodFormInline(html, method, new ViewDataDictionary())
    }
}
@helper NodeMethodFormInline(System.Web.Mvc.HtmlHelper html, NodeMethod method, ViewDataDictionary viewData)
{
    if (method != null)
    {
        viewData = viewData ?? new ViewDataDictionary();
        viewData.Add("Inline", true);
    @NodeMethodForm(html, method, "form-inline", viewData)
    }
}

@helper Form(HtmlHelper html, INode node)
{
    var settableProperties = ((IInvokeable)node).Parameters.Where(p => p.Readonly == false);
    @Form(html, node, settableProperties)
}

@helper Form(HtmlHelper html, INode node, IEnumerable<IInvokeableParameter> fieldsToDisplay)
{

    var isNodeMethod = node is NodeMethod;
    var fields = fieldsToDisplay as IInvokeableParameter[] ?? fieldsToDisplay.ToArray();
    if (isNodeMethod || fields.Any())
    {
        <form class="node-form" action="@node.Url" method="POST">
            @if (html.ViewData.ModelState.SelectMany(ms => ms.Value.Errors).Any())
            {
                <div class="noodles-callout noodles-callout-danger">
                    Please correct the issues below:
                    @html.ValidationSummary(true)
                </div>
            }
            @foreach (var field in fields)
            {
                var parameter = field;
                var vm = parameter.ToPropertyVm();
                @html.Partial("FormFactory/Form.Property", vm)
            }
            <input type="submit" value="@(isNodeMethod ? node.DisplayName : "Update")" />

        </form>

    }
}


@helper Property(HtmlHelper html, NodeProperty property)
{
    var vm = property.ToPropertyVm();
    vm.Readonly = true;
    html.RenderPartial("FormFactory/Form.Property", vm);
}