@* Generator: MvcHelper *@
@using System.ComponentModel
@using System.Reflection
@using System.Web.Mvc
@using System.Web.Mvc.Html
@using Noodles
@using Noodles.AspMvc
@using Noodles.AspMvc.Helpers
@using Noodles.AspMvc.UiAttributes
@using Noodles.Models

@helper NodeLink(HtmlHelper html, INode node)
{ @NodeLink(html, node, null)}
@helper NodeLink(HtmlHelper html, INode node, string additionalClasses)
{
    @NodeLink(html, node, additionalClasses, @<text>@node.DisplayName</text>)
}
@helper NodeLink(HtmlHelper htmlHelper, INode node, string additionalClasses, Func<dynamic, HelperResult> innerHtml)
{
    if (node != null)
    {
        Func<dynamic, HelperResult> initHtml = (@<a class="node-link @(additionalClasses ?? "") @(node.Name)" href="@node.Url">@innerHtml(null)</a>);
        var html = initHtml(null).ToHtmlString();
        foreach (var transformAtt in node.Attributes.OfType<ITransformHtml>())
        {
            html = transformAtt.Transform(htmlHelper, node, html).ToHtmlString();
        }
    @htmlHelper.Raw(html)
    }
}

@helper NodeMethodLink(IInvokeable method)
{ @NodeMethodLink(method, null)}
@helper NodeMethodLink(IInvokeable method, string additionalClasses)
{
    @NodeMethodLink(method, additionalClasses, @<text>@method.InvokeDisplayName</text>)
}
@helper NodeMethodLink(IInvokeable method, string additionalClasses, Func<dynamic, HelperResult> innerHtml)
{
    if (method != null)
    {
    <a class="nodeMethodLink @(additionalClasses ?? "") @(method.Target.NodeType().Name.ToClassName())" href="@method.InvokeUrl">@innerHtml(null)</a>
    }
}

@helper Form(HtmlHelper html, INode node)
{
    var settableProperties = ((IInvokeable)node).Parameters.Where(p => p.Readonly == false);
    @Form(html, node, settableProperties)
}

@helper Form(HtmlHelper htmlHelper, INode node, IEnumerable<IInvokeableParameter> fieldsToDisplay)
{
    if (node != null)
    {
        Func<dynamic, HelperResult> initHtml = (@<text>
    @{
        var isNodeMethod = node is NodeMethod;
        var fields = fieldsToDisplay as IInvokeableParameter[] ?? fieldsToDisplay.ToArray();
        if (isNodeMethod || fields.Any())
        {
        <form class="node-form" action="@node.Url" method="POST" enctype="multipart/form-data">
            @{
            var descriptionAttribute = node.Attributes.OfType<DescriptionAttribute>().SingleOrDefault();
            if (descriptionAttribute != null)
            {
                <div class="noodles-callout noodles-callout-info">
                    @htmlHelper.Raw(descriptionAttribute.Description)
                </div>
            }
            }
            @if (htmlHelper.ViewData.ModelState.SelectMany(ms => ms.Value.Errors).Any())
            {
                <div class="noodles-callout noodles-callout-danger">
                    Please correct the issues below: @htmlHelper.ValidationSummary(true)
                </div>
            }
            @foreach (var field in fields)
            {
                var parameter = field;
                var vm = parameter.ToPropertyVm();
                @htmlHelper.Partial("FormFactory/Form.Property", vm)
            }
            <input type="submit" value="@(isNodeMethod ? node.DisplayName : "Update")" />
        </form>
        }

    }
    </text>);
        var html = initHtml(null).ToHtmlString();
        foreach (var transformAtt in node.Attributes.OfType<ITransformHtml>().Where(a => a.GetType().GetCustomAttribute<NotInFormHelperAttribute>() == null))
        {
            html = transformAtt.Transform(htmlHelper, node, html).ToHtmlString();
        }
    @htmlHelper.Raw(html)
    }
}

@helper DropdownNode(HtmlHelper Html, INode node, string additionalClasses)
{
    @BootstrapHelper.DropdownLinksButton(node.DisplayName, @<li style="margin: 20px; width: 400px;" class="keep-open">
        @NoodlesHelper.Form(Html, node)
    </li>, additionalClasses)
}

@helper Property(HtmlHelper html, NodeProperty property)
{
    var vm = property.ToPropertyVm();
    vm.Readonly = true;
    html.RenderPartial("FormFactory/Form.Property", vm);
}