@* Generator: MvcHelper *@
@using System.Collections
@using System.Web.Mvc
@using System.Web.Mvc.Html
@using Noodles
@using Noodles.AspMvc
@using Noodles.AspMvc.Helpers
@using Noodles.AspMvc.Helpers.Icons
@using Noodles.Helpers
@using Noodles.AspMvc.Helpers
@using FormFactory
@using Noodles.AspMvc.Helpers.Icons
@helper NodeMethodsDropdown(object obj)
{ @NodeMethodsDropdown(obj, null) }
@helper NodeMethodsDropdown(object obj, string additionalClasses)
{ @NodeMethodsDropdown(obj, null, null) }
@helper NodeMethodsDropdown(object obj, string additionalClasses, string excludedMethodNamesCsv)
{
    var excludedMethodNames = (excludedMethodNamesCsv ?? "").Split(',');
    var filteredNodeMethods = obj.NodeMethods().Where(nm => excludedMethodNames.Contains(nm.Name) == false);
    if (filteredNodeMethods.Any())
    {
    @BootstrapHelper.DropdownLinksButton("Actions",
                @<text>
    @foreach (var method in filteredNodeMethods)
    {
        @NodeMethodLink(method)
    }
    </text>, additionalClasses)
    }
}
@helper NodeMethodsMenuLink(object obj)
{ @NodeMethodsMenuLink(obj, null) }
@helper NodeMethodsMenuLink(object obj, string additionalClasses)
{ @NodeMethodsMenuLink(obj, additionalClasses, null) }
@helper NodeMethodsMenuLink(object obj, string additionalClasses, string excludedMethodNamesCsv)
{
    var excludedMethodNames = (excludedMethodNamesCsv ?? "").Split(',');
    var nodeMethods = obj.NodeMethods();
    if (nodeMethods.Any(nm => excludedMethodNames.Contains(nm.Name) == false))
    {
    <a class="nodeMethodsMenuLink @(additionalClasses ?? "")" href="@nodeMethods.Url()" data-nodeid="@obj.Id()" data-excluded-methods="@excludedMethodNamesCsv">Actions</a>
    }
}
@helper NodeMethodLink(IInvokeable method)
{ @NodeMethodLink(method, null)}
@helper NodeMethodLink(IInvokeable method, string additionalClasses)
{
    @NodeMethodLink(method, additionalClasses, @<text>@method.DisplayName</text>)
}
@helper Icon(IInvokeable nm)
{
    var att = nm.GetAttribute<IconAttribute>();
    if (att != null)
    {
        var joinedParts = "icon-" + string.Join(" icon-", att.Parts);
    <i class="@joinedParts"></i>
    }
}
@helper NodeMethodIconLink(IInvokeable method, string additionalClasses, string iconName)
{
    @NodeMethodLink(method, "", @<i class="icon-@iconName"></i>)
}
@helper NodeMethodLink(IInvokeable method, string additionalClasses, Func<dynamic, HelperResult> innerHtml)
{
    if (method != null)
    {
        var nodeClass = method.AutoSubmit ? "nodeMethodAutoSubmit" : "nodeMethodLink";
    <a class="@(nodeClass) @(additionalClasses ?? "") @(method.Target.NodeType().Name.ToClassName())-@(method.Name.ToClassName())" data-nodeid="@method.Id()" href="@method.Url()">@Icon(method)@innerHtml(null)</a>
    }
}
@helper NodeMethodForm(System.Web.Mvc.HtmlHelper html, IInvokeable method, string formClass)
{
    if (method != null)
    {
    @html.Partial("Noodles/NodeMethod", method, new ViewDataDictionary { { "FormClass", formClass ?? "" } })
    }
}
@helper NodeMethodForm(System.Web.Mvc.HtmlHelper html, IInvokeable method, string formClass, ViewDataDictionary dict)
{
    if (method != null)
    {
        dict = dict ?? new ViewDataDictionary();
        dict["FormClass"] = formClass;
    @NodeMethodForm(html, method, dict)
    }
}
@helper NodeMethodForm(System.Web.Mvc.HtmlHelper html, IInvokeable method, ViewDataDictionary dict)
{
    if (method != null)
    {
        dict = dict ?? new ViewDataDictionary();
    <div class="nodeMethod">
        @html.Partial("Noodles/NodeMethod", method, dict)
    </div>
    }
}
@helper NodeMethodFormInline(System.Web.Mvc.HtmlHelper html, NodeMethod method)
{
    if (method != null)
    {
    @NodeMethodFormInline(html, method, new ViewDataDictionary())
    }
}
@helper NodeMethodFormInline(System.Web.Mvc.HtmlHelper html, NodeMethod method, ViewDataDictionary viewData)
{
    if (method != null)
    {
        viewData = viewData ?? new ViewDataDictionary();
        viewData.Add("Inline", true);
    @NodeMethodForm(html, method, "form-inline", viewData)
    }
}

@helper Property(System.Web.Mvc.HtmlHelper Html, NodeProperty property)
{
    <div data-node-property="@property.Name">
        @{
            
            var propertyVm = property.ToPropertyVm(Html);

            propertyVm.Readonly = true;
            <div data-node-getter="@property.Name">
                <div class="control-group">
                    <label class="control-label">@property.DisplayName</label>
                    <div class="controls">

                        @{
                            var att = property.CustomAttributes.OfType<ShowAttribute>().SingleOrDefault();
                            if (att != null && !string.IsNullOrWhiteSpace(att.UiHint))
                            {
                                @Html.BestPartial(property.Value, property.Value == null ? property.PropertyType : property.Value.GetType(), att.UiHint + ".")
                            }
                            else
                            {
                            @Html.BestProperty(property.ToPropertyVm(Html).Then(p => p.Readonly = true))
                            }
                        }

                    </div>
                </div>
                @if (!property.Readonly)
                {
                    <a class="show-setter" href="#edit @property.DisplayName"><i class="icon-edit "></i></a>
                }
            </div>
            if (!property.Readonly)
            {
                
            <div data-node-setter="@property.Name">
                @Html.Partial("Noodles/NodeMethod", property)
                <button class="btn btn-inverse hide-setter">Cancel</button>
            </div>
            }
        }
    </div>
}