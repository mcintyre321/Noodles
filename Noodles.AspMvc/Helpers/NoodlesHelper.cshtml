@* Generator: MvcHelper *@
@using System.Collections
@using System.Web.Mvc
@using System.Web.Mvc.Html
@using Noodles
@using Noodles.AspMvc
@using Noodles.AspMvc.Helpers
@using Noodles.Helpers
@using Noodles.AspMvc.Helpers
@using FormFactory
@using Noodles.Models
@using Noodles.RequestHandling
@helper NodeMethodsDropdown(Resource obj)
{ @NodeMethodsDropdown(obj, null) }
@helper NodeMethodsDropdown(Resource obj, string additionalClasses)
{ @NodeMethodsDropdown(obj, null, null) }
@helper NodeMethodsDropdown(Resource obj, string additionalClasses, string excludedMethodNamesCsv)
{
    var excludedMethodNames = (excludedMethodNamesCsv ?? "").Split(',');
    var filteredNodeMethods = obj.NodeMethods.ExceptNamed(excludedMethodNames);
    var filteredNodeLinks = obj.NodeLinks.ExceptNamed(excludedMethodNames);
    if (filteredNodeMethods.Cast<object>().Concat(filteredNodeLinks).Any())
    {
    @BootstrapHelper.DropdownLinksButton("Actions", @<text>
    @foreach (var method in filteredNodeMethods)
    {
        <li>@NodeMethodLink(method)</li>
    }
    @foreach (var link in filteredNodeLinks)
    {
        <li><a href="@link.Url">@link.DisplayName</a></li>
    }

    </text>, additionalClasses)
    }
}

@helper NodeMethodLink(IInvokeable method)
{ @NodeMethodLink(method, null)}
@helper NodeMethodLink(IInvokeable method, string additionalClasses)
{
    @NodeMethodLink(method, additionalClasses, @<text>@method.InvokeDisplayName</text>)
}
@helper NodeMethodLink(IInvokeable method, string additionalClasses, Func<dynamic, HelperResult> innerHtml)
{
    if (method != null)
    {
        <a class="nodeMethodLink @(additionalClasses ?? "") @(method.Target.NodeType().Name.ToClassName())" href="@method.InvokeUrl">@innerHtml(null)</a>
    }
}
@helper NodeMethodForm(System.Web.Mvc.HtmlHelper html, IInvokeable method, string formClass)
{
    if (method != null)
    {
    @html.Partial("Noodles/NodeMethod", method, new ViewDataDictionary { { "FormClass", formClass ?? "" } })
    }
}
@helper NodeMethodForm(System.Web.Mvc.HtmlHelper html, IInvokeable method, string formClass, ViewDataDictionary dict)
{
    if (method != null)
    {
        dict = dict ?? new ViewDataDictionary();
        dict["FormClass"] = formClass;
    @NodeMethodForm(html, method, dict)
    }
}
@helper NodeMethodForm(System.Web.Mvc.HtmlHelper html, IInvokeable method, ViewDataDictionary dict)
{
    if (method != null)
    {
        dict = dict ?? new ViewDataDictionary();
    <div class="nodeMethod">
        @html.Partial("Noodles/NodeMethod", method, dict)
    </div>
    }
}
@helper NodeMethodFormInline(System.Web.Mvc.HtmlHelper html, NodeMethod method)
{
    if (method != null)
    {
    @NodeMethodFormInline(html, method, new ViewDataDictionary())
    }
}
@helper NodeMethodFormInline(System.Web.Mvc.HtmlHelper html, NodeMethod method, ViewDataDictionary viewData)
{
    if (method != null)
    {
        viewData = viewData ?? new ViewDataDictionary();
        viewData.Add("Inline", true);
    @NodeMethodForm(html, method, "form-inline", viewData)
    }
}
