@* Generator: MvcHelper *@
@using System.Web.Mvc
@using System.Web.Mvc.Html
@using Noodles
@using Noodles.Helpers
@using Noodles.Web
@using Noodles.Web.Helpers
@using Noodles.Web.Helpers.Icons
@helper NodeMethodsDropdown(object obj)
    { @NodeMethodsDropdown(obj, null) }
@helper NodeMethodsDropdown(object obj, string additionalClasses)
    { @NodeMethodsDropdown(obj, null, null) }
@helper NodeMethodsDropdown(object obj, string additionalClasses, string excludedMethodNamesCsv)
    {
        var excludedMethodNames = (excludedMethodNamesCsv ?? "").Split(',');
        var filteredNodeMethods = obj.NodeMethods().Where(nm => excludedMethodNames.Contains(nm.Name) == false);
        if (filteredNodeMethods.Any())
        {
    @BootstrapHelper.DropdownLinksButton("Actions",
                @<text>
    @foreach (var method in filteredNodeMethods)
    {
        @NodeMethodLink(method)
    }
    </text>, additionalClasses)
        }
}
@helper NodeMethodsMenuLink(object obj)
    { @NodeMethodsMenuLink(obj, null) }
@helper NodeMethodsMenuLink(object obj, string additionalClasses)
    { @NodeMethodsMenuLink(obj, additionalClasses, null) }
@helper NodeMethodsMenuLink(object obj, string additionalClasses, string excludedMethodNamesCsv)
    {
        var excludedMethodNames = (excludedMethodNamesCsv ?? "").Split(',');
        var nodeMethods = obj.NodeMethods();
        if (nodeMethods.Any(nm => excludedMethodNames.Contains(nm.Name) == false))
        {
    <a class="nodeMethodsMenuLink @(additionalClasses ?? "")" href="@nodeMethods.Url()" data-nodeid="@obj.Id()" data-excluded-methods="@excludedMethodNamesCsv">Actions</a>
        }
}
@helper NodeMethodLink(NodeMethod method)
    { @NodeMethodLink(method, null)}
@helper NodeMethodLink(NodeMethod method, string additionalClasses)
    {
    @NodeMethodLink(method, additionalClasses, @<text>@method.DisplayName</text>)
}
@helper Icon(IconAttribute att){
    if (att != null)
    {
        <i class="icon-@att.IconName"></i>
    }
}

@helper NodeMethodLink(NodeMethod method, string additionalClasses, Func<dynamic, HelperResult> innerHtml)
    {
        if (method != null)
        {
            var nodeClass = method.AutoSubmit ? "nodeMethodAutoSubmit" : "nodeMethodLink";
            var icon = method.GetAttribute<IconAttribute>();
    <a class="@(nodeClass) @(additionalClasses ?? "") @(method.Target.NodeType().Name.ToClassName())-@(method.Name.ToClassName())" data-nodeid="@method.Id()" href="@method.Url()">@Icon(icon)@innerHtml(null)</a>
        }
}
@helper NodeMethodForm(System.Web.Mvc.HtmlHelper html, NodeMethod method, string formClass)
    {
        if (method != null)
        {
    <div class="nodeMethod">
        @html.Partial("Noodles/NodeMethod", method, new ViewDataDictionary { { "FormClass", formClass ?? "" } })
    </div>
        }
}
@helper NodeMethodForm(System.Web.Mvc.HtmlHelper html, NodeMethod method, string formClass, ViewDataDictionary dict)
    {
        if (method != null)
        {
            dict = dict ?? new ViewDataDictionary();
            dict["FormClass"] = formClass;
    @NodeMethodForm(html, method, dict)
        }
}
@helper NodeMethodForm(System.Web.Mvc.HtmlHelper html, NodeMethod method, ViewDataDictionary dict)
    {
        if (method != null)
        {
            dict = dict ?? new ViewDataDictionary();
    <div class="nodeMethod">
        @html.Partial("Noodles/NodeMethod", method, dict)
    </div>
        }
}
@helper NodeMethodFormInline(System.Web.Mvc.HtmlHelper html, NodeMethod method)
    {
        if (method != null)
        {
    @NodeMethodFormInline(html, method, new ViewDataDictionary())
        }
}
@helper NodeMethodFormInline(System.Web.Mvc.HtmlHelper html, NodeMethod method, ViewDataDictionary viewData)
    {
        if (method != null)
        {
            viewData = viewData ?? new ViewDataDictionary();
            viewData.Add("Inline", true);
    @NodeMethodForm(html, method, "form-inline", viewData)
        }
}
