@* Generator: MvcHelper *@
@using System.Web.Mvc
@using System.Web.Mvc.Html
@using Noodles
@using Noodles.Helpers
@helper NodeActionsDropdown(object obj)
    { @NodeActionsDropdown(obj, null) }
@helper NodeActionsDropdown(object obj, string additionalClasses)
    {
    if (obj.NodeActions().Any())
    {
    @BootstrapHelper.DropdownLinksButton("Actions",
            @<text>
    @foreach (var action in obj.NodeActions())
    {
        @NodeActionLink(action)
    }
    </text>, additionalClasses)
    }
}
@helper NodeActionsMenuLink(object obj)
    { @NodeActionsMenuLink(obj, null) }
@helper NodeActionsMenuLink(object obj, string additionalClasses)
    {
    if (obj.NodeActions().Any())
    {
    <a class="nodeActionsMenuLink @(additionalClasses ?? "")" href="#show actions" data-nodeid="@obj.Id()" data-nodeactionspath="@obj.Path()?action=getNodeActions">Actions</a>
    }
}
@helper NodeActionLink(INodeAction action)
    { @NodeActionLink(action, null)}
@helper NodeActionLink(INodeAction action, string additionalClasses)
    {
    <a class="nodeActionLink @(additionalClasses ?? "")" href="#@action.Name" data-nodeid="@action.Id()" data-nodepath="@action.Path()">@action.DisplayName</a>
}
@helper NodeActionForm(System.Web.Mvc.HtmlHelper html, INodeAction action, string formClass)
    {
    <div class="objectAction">
        @html.Partial("Noodles/NodeAction", action, new ViewDataDictionary { { "FormClass", formClass ?? "" } })
    </div>
}
@helper NodeActionForm(System.Web.Mvc.HtmlHelper html, INodeAction action, string formClass, ViewDataDictionary dict)
    {
    dict = dict ?? new ViewDataDictionary();
    dict["FormClass"] = formClass;
    @NodeActionForm(html, action, dict)
}
@helper NodeActionForm(System.Web.Mvc.HtmlHelper html, INodeAction action, ViewDataDictionary dict)
    {
    dict = dict ?? new ViewDataDictionary();
    <div class="objectAction">
        @html.Partial("Noodles/NodeAction", action, dict)
    </div>
}
@helper NodeActionFormInline(System.Web.Mvc.HtmlHelper html, INodeAction action)
    {
    @NodeActionFormInline(html, action, new ViewDataDictionary())
}
@helper NodeActionFormInline(System.Web.Mvc.HtmlHelper html, INodeAction action, ViewDataDictionary viewData)
    {
    viewData = viewData ?? new ViewDataDictionary();
    viewData.Add("Inline", true);
    @NodeActionForm(html, action, "form-inline", viewData)
}
