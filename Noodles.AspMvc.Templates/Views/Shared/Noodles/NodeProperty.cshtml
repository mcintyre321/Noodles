@using System.Web.Mvc
@using System.Web.Mvc
@using System.Web.Mvc.Html
@using FormFactory
@using Noodles
@using Noodles.Helpers
@using Noodles.AspMvc.Helpers
@model NodeProperty
@{
    var property = Model;
}
<div data-node-property="@property.Name">
    @{
            
        var propertyVm = property.ToPropertyVm(Html);
        propertyVm.Readonly = true;
        <div data-node-getter="@property.Name">
            <div class="control-group">
                <label class="control-label">@property.DisplayName</label>
                <div class="controls">
                    @if(!string.IsNullOrWhiteSpace(Model.UiHint))
                    {
                        var viewName = Html.BestViewName(Model.Value == null ? Model.PropertyType : Model.Value.GetType(), Model.UiHint + ".");
                        if (viewName == null)
                        {
                            throw new UiHintException("Could not find view for prefix "  + Model.UiHint + " for property " + property.Url + " of type " + property.PropertyType.Name);
                        }
                        @Html.Partial(viewName, Model)    
                    }else
                    {
                        @Html.BestProperty(property.ToPropertyVm(Html).Then(p => p.Readonly = true))
                    }

                </div>
            </div>
            @if (!property.Readonly)
            {
                <a class="show-setter" href="#edit @property.DisplayName"><i class="icon-edit "></i></a>
            }
        </div>
        if (!property.Readonly)
        {
                
        <div data-node-setter="@property.Name">
            @Html.Partial("Noodles/NodeMethod", property)
            <button class="btn btn-inverse hide-setter">Cancel</button>
        </div>
        }
    }
</div>
