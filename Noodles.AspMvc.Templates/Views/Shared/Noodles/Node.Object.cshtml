@using System.Web.Mvc
@using System.Web.Mvc.Html
@using Noodles
@using Noodles.AspMvc.Views.Shared.Layout
@using Noodles.Helpers
@using Noodles.AspMvc.Helpers
@using Noodles.Models
@using Noodles.RequestHandling
@using FormFactory;
@model Noodles.Models.Resource
@helper Nav(HtmlHelper helper, Resource resource, IEnumerable<Resource> walked, string navOptions)
{
    <ul class="nav @navOptions">
        @foreach (var node in resource.Links.Where(l => l.UiHint == ""))
        {
            var active = walked.Any(w => w.Url == node.Url);
            <li @Html.Raw(active ? "class=\"active\"" : "")><a href="@node.Url">@node.DisplayName</a></li>
        }
    </ul> 
}
@helper Render(HtmlHelper helper, Resource resource, IEnumerable<Resource> walked, Func<IHtmlString> getInner)
{
    if (resource.Links.Any())
    {
        if (resource.UiHint == "SideMenu")
        {
            ViewBag.Indent = (ViewBag.Indent ?? 0) + 3;
    <div class="row">
        <div class="span3">
            @Nav(helper, resource, walked, "nav-pills nav-stacked")
        </div>
        <div class="span@(12 - (ViewBag.Indent?? 0))">@getInner()</div>
    </div>
        }
        else
        {
            if (resource.Parent == null)
            {
                ViewData.LayoutVm().TopBar.Brand = new BrandVm(){ Html = resource.DisplayName, Href = resource.Url};
                ViewData.LayoutVm().TopBar.LeftItems.AddRange(resource.Links.Where(l => l.UiHint == "")
                    .Select(l => new NavItemVm(){ Href = l.Url, Html =  l.DisplayName, Active = walked.Any(u => u.Url == l.Url) }));
                ViewData.LayoutVm().TopBar.RightItems.AddRange(resource.Links.Where(l => l.UiHint == "TopBar.RightItems")
                    .Select(l => new NavItemVm(){ Href = l.Url, Html =  l.DisplayName, Active = walked.Any(u => u.Url == l.Url) }));

            }
            else
            {

                <div class="navbar">
                    <div class="navbar-inner">
                        @if (resource.Parent == null)
                        {
                            <a class="brand" href="@resource.Url">@resource.DisplayName</a>
                        }
                        @Nav(helper, resource, walked, "")
                    </div>
                </div>
            }
            @getInner();
        }

    }
    else
    {
        @getInner();
    }
}

@{
    var walked = Model.AncestorsAndSelf.OfType<Resource>().ToArray();
    Func<IHtmlString>
content = () => Render(Html, Model, walked, () => Html.BestPartial(Model, Model.ValueType, "Noodles/NodeBody."));
    foreach (var walkedItem in walked.Skip(1))
    {
        var prev = content;
        var target = walkedItem;
        content = () => Render(Html, target, walked, prev);
    }
    @content();
}