@using System.Web.Mvc
@using System.Web.Mvc.Html
@using Noodles.AspMvc.UiAttributes
@using Noodles.AspMvc.Views.Shared.Layout
@using Noodles.AspMvc.Helpers
@using Noodles.Models
@using FormFactory;
@model Noodles.Models.Resource
@{
    var walked = Model.AncestorsAndSelf.OfType<Resource>().ToArray();
    foreach (var walkedItem in walked.Reverse())
    {
        @RenderMenu(Html, walkedItem, walked);
    }

    @Html.BestPartial(Model, Model.ValueType, "Noodles/NodeBody.")

}


@helper RenderMenu(HtmlHelper helper, Resource resource, IEnumerable<Resource> walked)
{
    var links = resource.Links.GroupBy(l => l.UiHint);

    if (resource.Parent == null)
    {
        foreach (var method in resource.NodeMethods.Hinted("TopBar.RightItems"))
        {
            Html.LayoutVm().TopBar.RightItems.Add(new NavItemVm() {Html = NoodlesHelper.NodeMethodLink(method).ToHtmlString()});
        }
    }
    foreach (var linkGroup in links)
    {
        switch (linkGroup.Key)
        {
            case "SideNav":
                {
                    ViewBag.Indent = (ViewBag.Indent ?? 0) + 3;
                    <div class="row">
                        <div class="span3">
                            @Nav(helper, linkGroup, walked, "nav-pills nav-stacked")
                        </div>
                        <div class="span@(12 - (ViewBag.Indent ?? 0))"></div>
                    </div>
                    break;
                }
            case "TopBar.RightItems":
                {
                    Html.LayoutVm().TopBar.RightItems.AddRange(linkGroup.Select(l => new NavItemVm() {Html = "<a href='" + l.Url + "'>" + l.DisplayName + "</a>", Active = walked.Any(u => u.Url == l.Url)}));
                    break;
                }
            case "TopBar.LeftItems":
                {
                    Html.LayoutVm().TopBar.LeftItems.AddRange(linkGroup.Select(l => new NavItemVm() {Html = "<a href='" + l.Url + "'>" + l.DisplayName + "</a>", Active = walked.Any(u => u.Url == l.Url)}));
                    break;
                }
            case "Inline":
                {

                }
                break;
            case "":
                {
                    <div class="navbar">
                        <div class="navbar-inner">
                            @if (resource.Parent == null)
                            {
                                <a class="brand" href="@resource.Url">@resource.DisplayName</a>
                            }
                            @Nav(helper, linkGroup, walked, "")
                        </div>
                    </div>
                    break;
                }
            default:
                {
                    var type = linkGroup.First().TargetType;
                    var prefix = "Links." + linkGroup.Key + ".";
                    var partialName = Html.BestViewName(type, prefix);
                    if (partialName == null)
                    {
                        throw new Exception("Could not find views for " + prefix + type.FullName);
                    }
                    @Html.Partial(partialName, linkGroup)
                    break;
                }
        }
    }
}

@helper Nav(HtmlHelper helper, IEnumerable<NodeLink> links, IEnumerable<Resource> walked, string navOptions)
{
    <ul class="nav @navOptions">
        @foreach (var node in links)
        {
            var active = walked.Any(w => w.Url == node.Url);
            <li @Html.Raw(active ? "class=\"active\"" : "")><a href="@node.Url">@node.DisplayName</a></li>
        }
    </ul>
}